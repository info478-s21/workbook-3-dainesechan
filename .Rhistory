git clone https://github.com/info478-s21/workbook-0-dainesechan.git
$ git clone https://github.com/info478-s21/workbook-0-dainesechan.git
cd
library(tidyverse)
library(tidyverse)
data <- read.csv("netflix_titles.csv")
data <- read.csv("Downloads/netflix_titles.csv")
data <- read.csv("netflix_titles.csv")
data <- read.csv("netflix_titles.csv")
data <- read.csv("data/netflix_titles.csv")
setwd("~/")
data <- read.csv("workboook-0-dainesechan/data/netflix_titles.csv")
data <- read.csv("wnetflix_titles.csv")
data <- read.csv("wnetflix_titles.csv")
data <- read.csv("netflix_titles.csv")
data <- read.csv("netflix_titles.csv")
data <- read.csv("Documents/workbook-0-dainesechan/data/netflix_titles.csv")
View(data)
View(data)
datanfx <- read.csv("Documents/workbook-0-dainesechan/data/netflix_titles.csv")
horrormovs <- df %>%
group_by(listed_in) %>%
filter(listed_in %like% 'Horror Movies')
horrormovs <- df %>%
group_by(listed_in) %>%
filter(listed_in %like% 'Horror Movies')
horrormovs <- datanfx %>%
group_by(listed_in) %>%
filter(listed_in %like% 'Horror Movies')
horrormovs <- datanfx
group_by(listed_in) %>%
filter(listed_in %like% 'Horror Movies')
View(horrormovs)
View(horrormovs)
horrormovs <- datanfx %>%
select(contains("Horror Movies"))
horrormovs <- datanfx
select(contains("Horror Movies"))
horrormovs <- datanfx %>%
select(contains("Horror Movies"))
library(dplyr)
horrormovs <- datanfx %>%
select(listed_in,contains("Horror Movies"))
View(horrormovs)
View(horrormovs)
horrormovs <- datanfx %>%
filter(listed_in, contains("Horror Movies"))
horrormovs <- datanfx %>%
select(listed_in) %>%
filter(contains("Horror Movies"))
horrormovs <- datanfx %>%
select(listed_in) %>%
filter(contains("Horror Movies"))
horrormovs <- datanfx %>%
select(listed_in, year)
horrormovs <- datanfx %>%
select(listed_in, release_year)
View(horrormovs)
View(horrormovs)
horrormovs <- datanfx %>%
select(listed_in, release_year) %>%
filter(contains("Horror Movies"))
horrormovs <- datanfx %>%
select(listed_in, contains("Horror Movies"))
View(horrormovs)
View(horrormovs)
horrormovs <- datanfx %>%
select(listed_in, contains("Horror Movies"))
horrormovs <- datanfx[datanfx$listed_in %like% "Horror Movies"]
library(data.table)
library(data.table)
horrormovs <- datanfx[datanfx$listed_in %like% "Horror Movies"]
View(datanfx)
View(datanfx)
horrormovs <- datanfx$listed_in %like% "Horror Movies"
horrormovs <- datanfx$listed_in %like% "Horror Movies"
library(stringr)
horrormovs <- datanfx %>%
filter(str_detect(listed_in, "Horror Movies"))
View(horrormovs)
View(horrormovs)
horrormovs <- datanfx %>%
filter(str_detect(listed_in, "Horror Movies")) %>%
group_by(release_year)
View(horrormovs)
View(horrormovs)
horrormovs <- datanfx %>%
filter(str_detect(listed_in, "Horror Movies")) %>%
group_by(release_year)
horrormovs <- datanfx %>%
select(listed_in, release_year)
filter(str_detect(listed_in, "Horror Movies")) %>%
group_by(release_year) %>%
mutate(num_inyear = sum(release_year))
filter(str_detect("Horror Movies")) %>%
group_by(release_year) %>%
mutate(num_inyear = sum(release_year))
horrormovs <- datanfx %>%
select(listed_in, release_year) %>%
filter(str_detect(listed_in, "Horror Movies")) %>%
group_by(release_year) %>%
mutate(num_inyear = sum(release_year))
horrormovs <- datanfx %>%
select(listed_in, release_year) %>%
filter(str_detect(listed_in, "Horror Movies")) %>%
group_by(release_year) %>%
summarize(nums_year = sum(release_year, na.rm = TRUE ))
horrormovs <- datanfx %>%
select(listed_in, release_year) %>%
filter(str_detect(listed_in, "Horror Movies")) %>%
group_by(release_year)
horrormovs <- datanfx %>%
select(listed_in, release_year) %>%
filter(str_detect(listed_in, "Horror Movies")) %>%
group_by(release_year) %>%
summarize(totalmovs_year = n())
horrosonly <- datanfx %>% select(listed_in, release_year)
View(horrosonly)
View(horrosonly)
horrormovs <- datanfx %>%
select(listed_in, release_year) %>%
filter(str_detect(listed_in, "Horror Movies")) %>%
group_by(release_year)
horrormovs <- datanfx %>%
select(listed_in, release_year) %>%
filter(str_detect(listed_in, "Horror Movies")) %>%
group_by(release_year) %>%
summarize(totalmovs_year = n())
ggplot(data = horrormovs, aes(x = release_year, y = totalmovs_year)) +
geom_point(aes(color = release_year))
library(ggplot2)
library(ggplot)
install.packages(tidyverse)
install.packages(tidyverse)
library(ggplot2)
ggplot(data = horrormovs, aes(x = release_year, y = totalmovs_year)) +
geom_point(aes(color = release_year))
ggplot(data = horrormovs, aes(x = release_year, y = totalmovs_year)) +
geom_smooth(aes(color = release_year))
ggplot(data = horrormovs, aes(x = release_year, y = totalmovs_year)) +
geom_bar(aes(color = release_year))
ggplot(data = horrormovs, aes(x = release_year, y = totalmovs_year)) +
geom_bar(aes(color = release_year))
ggplot(data = horrormovs, aes(x = release_year, y = totalmovs_year)) +
geom_bar(stat = totalmovs_year)
ggplot(data = horrormovs, aes(x = release_year, y = totalmovs_year)) +
geom_bar(stat =" identity)
ggplot(data = horrormovs, aes(x = release_year, y = totalmovs_year)) +
geom_bar(stat =" identity")
ggplot(data = horrormovs, aes(x = release_year, y = totalmovs_year)) +
geom_bar(stat ="identity")
ggplot(data = horrormovs, aes(x = release_year, y = totalmovs_year)) +
geom_bar(stat ="identity", fill = "blue")
ggplot(data = horrormovs, aes(x = release_year, y = totalmovs_year)) +
geom_bar(stat ="identity", fill = "pink")
ggplot(data = horrormovs, aes(x = release_year, y = totalmovs_year)) +
geom_bar(stat ="identity", fill = "purple")
horrormovs_plot <-
ggplot(data = horrormovs, aes(x = release_year, y = totalmovs_year)) +
geom_bar(stat ="identity", fill = "purple")
knitr::opts_chunk$set(echo = TRUE)
source("analysis.R")
library(stringr)
knitr::opts_chunk$set(echo = TRUE)
source("analysis.R")
datanfx <- read.csv("Documents/workbook-0-dainesechan/data/netflix_titles.csv")
horrormovs_plot(datanfx)
setwd("~/")
source('~/analysis.R')
#how many horror movies out according to year
horrormovs <- datanfx %>%
select(listed_in, release_year) %>%
filter(str_detect(listed_in, "Horror Movies")) %>%
group_by(release_year) %>%
summarize(totalmovs_year = n())
setwd("~/")
#how many horror movies out according to year
horrormovs <- datanfx %>%
select(listed_in, release_year) %>%
filter(str_detect(listed_in, "Horror Movies")) %>%
group_by(release_year) %>%
summarize(totalmovs_year = n())
library(lintr)
library(lintr)
setwd("~/")
lint("analysis.R")
lint("analysis.R")
lint("analysis.R")
lint("analysis.R")
lint("analysis.R")
lint("analysis.R")
lint("analysis.R")
lint("analysis.R")
lint("analysis.R")
setwd("~/")
setwd("~/")
h <- Heaviside(x)
h <- Heaviside(x, a = 0)
h <- Heaviside(x)
h <- heaviside(x)
h <- heaviside(x)
h <- Heaviside(x, a = 0)
library(fBasics)
install.packages("fBasics")
library(fBasics)
h <- Heaviside(x, a = 0)
h <- Heaviside(x, a = 0)
x <- c(1:50)
View(datanfx)
x <- c(1:50)
h <- Heaviside(x, a = 0)
h <- Heaviside(x, a = 0)
Heaviside(x, a = 0)
Heaviside(x)
qqplot(50, 50,
xlim = xlim, ylim = ylim,
xlab = "x", ylab = "F(x,delta)",
main = "Quantile function plot")
xlim <- range(-50,50)
ylim <- range(-50,50)
xlim <- range(-50,50)
qqplot(50, 50,
xlim = xlim, ylim = ylim,
xlab = "x", ylab = "F(x,delta)",
main = "Quantile function plot")
quantile(x)
intervals <- seq(-0.25, 0.35,length=100)
plot_x <- dnorm(intervals,0.05,0.1)
plot_y <- dnorm(intervals,0.025,0.05)
plot(intervals, plot_x, type="l", col="blue")
lines(intervals, plot_y, type="l", col="pink")
intervals <- seq(-0.25, 0.35,length=100)
plot_x <- dnorm(intervals,0.05,0.1)
plot_y <- dnorm(intervals,0.025,0.05)
plot(intervals, plot_x, type="l", col="blue", xlab = "intervals", ylab = "density")
lines(intervals, plot_y, type="l", col="pink")
intervals <- seq(-0.25, 0.35,length=100)
plot_x <- dnorm(intervals,0.05,0.1)
plot_y <- dnorm(intervals,0.025,0.05)
plot(intervals, plot_x, type="l", col="blue", xlab = "intervals", ylab = "return")
lines(intervals, plot_y, type="l", col="pink")
qnorm(0.01, mean = 0.04, sd = 0.09)
value_AR <- 100000* one_perc_q
one_perc_q <- qnorm(0.01, mean = 0.04, sd = 0.09)
value_AR <- 100000* one_perc_q
value_AR1 <- 100000* one_perc_q
five_perc_q <-qnorm(0.05, mean = 0.04, sd = 0.09)
value_AR5 <- 100000 * five_perc_q
cc_var1 <- log(value_AR1 + 1)
cc_var1q <- log(one_perc_q + 1)
cc_var1 <- 100000 * cc_var1q
cc_var5q <- log(five_perc_q + 1)
cc_var5 <- 100000 * cc_var5q
R.01 = exp(one_perc_q) -1
R.01 = exp(one_perc_q) -1
R.05 = exp(five_perc_q) - 1
R.01 * 100000
R.05 * 100000
year_var1 <- sqrt(12) * R.01 * 100000
year_var5 <- sqrt(12) * R.05 * 100000
curve(dchisq(x, df = 1), from = 0, to = 40,
main = 'Chi-Square Distribution (df = 1)', #add title
ylab = 'Density', #change y-axis label
lwd = 2, #increase line width to 2
col = 'steelblue') #change line color to steelblue
curve(dchisq(x, df = 1), from = 0, to = 40,
main = 'Chi-Square Distribution (df = 1)',
ylab = 'Density',
lwd = 2,
col = 'steelblue',
dchisq(x, df = 2), from = 0, to = 40,
main = 'Chi-Square Distribution (df = 1)', #add title
ylab = 'Density', #change y-axis label
lwd = 2, #increase line width to 2
col = 'pink')
curve(dchisq(x, df = 1), from = 0, to = 40,
main = 'Chi-Square Distribution (df = 1)',
ylab = 'Density',
lwd = 2,
col = 'steelblue',
)
lines(dchisq(x, df = 2), from = 0, to = 40,
main = 'Chi-Square Distribution (df = 2)',
ylab = 'Density',
lwd = 2,
col = 'red')
lines(dchisq(x, df = 2), 0, 40,
main = 'Chi-Square Distribution (df = 2)',
ylab = 'Density',
lwd = 2,
col = 'red')
lines(dchisq(x, df = 2), from = 0, to = 40,
main = 'Chi-Square Distribution (df = 2)',
ylab = 'Density',
lwd = 2,
col = 'red')
lines(dchisq(x, df = 5), from = 0, to = 40,
main = 'Chi-Square Distribution (df = 5)',
ylab = 'Density',
lwd = 2,
col = 'pink')
lines(dchisq(x, df = 10), from = 0, to = 40,
main = 'Chi-Square Distribution (df = 10)',
ylab = 'Density',
lwd = 2,
col = 'green')
lines(dchisq(x, df = 5), from = 0, to = 40, lty = 2
main = 'Chi-Square Distribution (df = 5)',
ylab = 'Density',
lwd = 2,
col = 'pink')
lines(dchisq(x, df = 5), from = 0, to = 40, lty = 2,
main = 'Chi-Square Distribution (df = 5)',
ylab = 'Density',
lwd = 2,
col = 'pink')
curve(dchisq(x,1),xlim=c(0,15),ylim=c(0,0.6),ylab="Chi Square Density")
curve(dchisq(x,2),col="red",lty=2,add=TRUE)
curve(dchisq(x,5),col="dark green",lty=3,add=TRUE)
curve(dchisq(x,10),col="brown",lty=4,add=TRUE)
legend(12,0.55,c("df=1","df=2", "df=5","df=10"),
col=c("black","red","dark green","brown"),lty=1:4)
curve(dt(x,1),xlim=c(-5,5),ylim=c(0,0.4),ylab="Student's t Density")
curve(dt(x,2),col="red",lty=2,add=TRUE)
curve(dt(x,5),col="blue",lty=3,add=TRUE)
curve(dt(x,10),col="dark green",lty=4,add=TRUE)
legend(2,0.38,c("k=1","k=2","k=5","k=20","normal curve"),
col=c("black","red","blue","dark green"),lty=1:4)
curve(dt(x,1),xlim=c(-5,5),ylim=c(0,0.4),ylab="Student's t Density")
curve(dt(x,2),col="red",lty=2,add=TRUE)
curve(dt(x,5),col="blue",lty=3,add=TRUE)
curve(dt(x,10),col="dark green",lty=4,add=TRUE)
legend(2,0.38,c("df=1","df=2","df=5","df=20"),
col=c("black","red","blue","dark green"),lty=1:4)
md_X1 = 0.1 + 0.2
md_X2 = 0.1 + 0.2
md_X3 = 0.1 + 0.3
md_Y1 = 0.1 + 0.1
md_Y2 = 0.2 + 0.1
md_Y3 = 0.2 + 0.3
E[X] = (1 * md_X1) + (2 * md_X2) + (3* md_X3)
ex = (1 * md_X1) + (2 * md_X2) + (3* md_X3)
varx = ((1- ex)^2 * md_X1) + ((2- ex)^2 * md_X2) + ((3- ex)^2 * md_X3)
sdx = sqrt(varx)
ey = (1 * md_Y1) + (2 * md_Y2) + (3* md_Y3)
vary = ((1- ey)^2 * md_Y1) + ((2- ey)^2 * md_Y2) + ((3- ey)^2 * md_Y3)
sdy = sqrt(vary)
covxy = (1-ex) * (1-ey) * 0.1 + (1-ex) * (2-ey) * 0.2 + (2-ex) * (1-ey) * 0.1 +
(2-ex) * (3-ey) * 0.2 + (3-ex) * (2-ey) * 0.1 + (3-ex) * (2-ey) * 0.3
corrxy = covxy / (sdx * sdy)
1- pnorm(0.1, mean = 0.05, sd = 0.1)
pnorm(-0.1, mean = 0.05, sd = 0.1)
x = pnorm(0.15, mean = 0.05, sd =0.1)
# X > -0.05
y = pnorm(-0.05, mean = 0.05, sd = 0.1)
x-y
qnorm(0.01, mean = 0.05, sd = 0.1)
#e) 5%quantile,q05
qnorm(0.05, mean = 0.05, sd = 0.1)
#f) 95%quantileq95
qnorm(0.95, mean = 0.05, sd = 0.1)
#g) 99%quantile,q99
qnorm(0.99, mean = 0.05, sd = 0.1)
one_perc_q <- qnorm(0.01, mean = 0.04, sd = 0.09)
value_AR1 <- 100000* one_perc_q
five_perc_q <-qnorm(0.05, mean = 0.04, sd = 0.09)
value_AR5 <- 100000 * five_perc_q
R.01 * 100000
R.05 * 100000
year_var1 <- sqrt(12) * R.01 * 100000
year_var5 <- sqrt(12) * R.05 * 100000
r.A = (41.29 - 38.23) / 38.23
r.C = (41.74-41.11) / 41.11
cc.A = log(1 + r.A)
cc.C = log(1 + r.C)
simple_r * 100
simple_r = (41.74 + 0.1 - 41.11) / 41.11
simple_r * 100
div_yield = 0.1/41.11
div_yield * 100
Rmonth.A = r.A
Rmonth.C = r.C
R_yearA = ((1+Rmonth.A)^12) - 1
R_yearA * 100
R_yearC = ((1+Rmonth.C)^12) - 1
R_yearC * 100
r.yearA = log(1+ R_yearA)
r.yearC = log(1 + R_yearC)
r.yearA * 100
r.yearC = log(1 + R_yearC)
r.yearC *100
#(Assume partial share purchases are possible)
xA = 8000 / 10000
xC = 2000 / 10000
msR_port = xA * Rmonth.A + xC * Rmonth.C
mCC_port = log(1 + msR_port)
Re = (1.3 - 1.5) / 1.5
#b) Compute the simple rate of return, Ruk, from the UK stock prices.
Ruk = (45 - 40) / 40
#c) Compute the simple rate of return, Rus, from the prices in US dollars.
Rus = (58.5 - 60) / 58.5
setwd("~/Documents/INFO-478/workbook-2-dainesechan/dalys")
setwd("~/Documents/INFO-478/workbook-3-dainesechan")
setwd("~/Documents/INFO-478/workbook-3-dainesechan")
# Analysis
# Set up - make sure to set your working directory using RStudio
library(tidyr)
library(dplyr)
library(ggplot2)
# Create the `charts/` directory (you can do this from R!)
dir.create("charts", showWarnings = FALSE)
# Load prepped data
health_data <- read.csv("//data/prepped/all_data.csv")
# Load prepped data
health_data <- read.csv("./data/prepped/all_data.csv")
health_data <- read.csv("./data/prepped/all_data.csv")
setwd("~/Documents/INFO-478/workbook-3-dainesechan")
health_data <- read.csv("./data/prepped/all_data.csv")
# Prep data
# Set up - make sure to set your working directory using RStudio
library(tidyr)
library(dplyr)
library(readxl)
# Load HALE data
hale <- read.csv("./data/raw/hale.csv", stringsAsFactors = FALSE) %>%
rename(hale = val) %>%
select(location_id, year, hale)
# Load life expectancy data
life_expectancy <- read.csv(
"./data/raw/life_expectancy.csv",
stringsAsFactors = FALSE
) %>%
rename(le = val) %>%
select(location_id, year, le)
# Load DALY data
dalys <- read.csv("./data/raw/dalys.csv", stringsAsFactors = FALSE) %>%
rename(dalys = val) %>%
select(location_id, year, dalys)
# Join data
all_data <- life_expectancy %>%
left_join(hale, by = c("year", "location_id")) %>%
left_join(dalys, by = c("year", "location_id"))
# Load hierarchy of locations (to exclude estimates at aggregate levels)
location_hierarchy <- read_excel("./data/raw/location_hierarchy.XLSX") %>%
filter(level == 3) %>% # only country level
select(location_id, location_name)
# Merge data, exclude aggregate locations
prepped <- left_join(location_hierarchy, all_data, by = "location_id") %>%
select(location_name, year, hale, le, dalys)
# Create `data/prepped/` folder
dir.create("data/prepped", showWarnings = FALSE)
# Write data
write.csv(prepped, "./data/prepped/all_data.csv", row.names = FALSE)
health_data <- read.csv("./data/prepped/all_data.csv")
ggplot(data_2016) +
geom_point(mapping = aes(x = le, y = hale))
data_2016 <- health_data %>%
filter(year == 2016)
ggplot(data_2016) +
geom_point(mapping = aes(x = le, y = hale))
ggplot(data_2016) +
geom_point(mapping = aes(x = le, y = hale)) +
labs(title = "Life Expectancy vs HALE",
x = "Life Expectancy",
y = "HALE")
cor(data_2016$hale, data_2016$le)
ggsave("charts/le_hale_plot.png")
cor(data_2016$dalys, data_2016$le)
cor(data_2016$dalys, data_2016$hale)
ggsave("charts/daly_hale_plot.png")
# First, you will need to reshape the data to create columns *by metric-year*
# This will create `hale_2016`, `hale_1990`, `le_2016`, etc.
# To do this, I suggest that you use the `pivot` function in the new
# tidyverse release:https://tidyr.tidyverse.org/articles/pivot.html#wider
data_wide <- health_data %>%
pivot_wider(names_from = year,
values_from = c(hale, le, dalys))
View(data_wide)
# Create columns to store the change in life expectancy, and change in hale
data_wide <- data_wide %>%
mutate(hale_diff = hale_2016 - hale_1990,
le_diff = le_2016 - le_1990)
# Plot the *change in hale* against the *change in life expectancy*
# Add a 45 degree line (i.e., where x = y), and save the graph to `charts/`
# What does this mean?!?! Put your interpretation below
ggplot(data_wide) +
geom_point(mapping = aes(x = le_diff, y = hale_diff)) +
labs(title = "Life Expectancy difference vs HALE difference",
x = "Change in Life Expectancy",
y = "Change in HALE")
# Plot the *change in hale* against the *change in life expectancy*
# Add a 45 degree line (i.e., where x = y), and save the graph to `charts/`
# What does this mean?!?! Put your interpretation below
ggplot(data_wide) +
geom_point(mapping = aes(x = le_diff, y = hale_diff)) +
labs(title = "Life Expectancy difference vs HALE difference",
x = "Change in Life Expectancy",
y = "Change in HALE") +
geom_abline(intercept = 0, slope = 1)
# Plot the *change in hale* against the *change in life expectancy*
# Add a 45 degree line (i.e., where x = y), and save the graph to `charts/`
# What does this mean?!?! Put your interpretation below
ggplot(data_wide) +
geom_point(mapping = aes(x = le_diff, y = hale_diff)) +
labs(title = "Life Expectancy difference vs HALE difference",
x = "Change in Life Expectancy",
y = "Change in HALE") +
geom_abline(intercept = 0, slope = 1) +
xlim(-15, 20) +
ylim(-15, 20)
ggsave("charts/change_plot.png")
setwd("~/Documents/INFO-478/workbook-3-dainesechan")
